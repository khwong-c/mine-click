name: Build and Deploy
on:
  push:
  pull_request:
  workflow_dispatch:
permissions:
  id-token: write
  pages: write
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/configure-pages@v5
      - uses: pnpm/action-setup@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'pnpm'
      - run: pnpm i

      # Testing and Linting before build
      - run: pnpm lint
      #    - run: pnpm test

      - run: pnpm build
      - uses: actions/upload-pages-artifact@v4
        with:
          path: './dist'

  build-backend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: server/go.mod
          cache-dependency-path: server/go.sum

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.4
          working-directory: server

      - name: Test
        run: make test
        working-directory: server

      - name: Report
        uses: becheran/go-testreport@main
        with:
          input: server/test-report.json

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: ${{ github.ref_name == 'main' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        if: ${{ github.ref_name == 'main' }}
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: server
          file: ./server/alpine.Dockerfile
          push: ${{ github.ref_name == 'main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

    outputs:
      image_name: ${{ steps.meta.outputs.tags }}

  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }}
    concurrency:
      group: deployment
    needs:
      - build-frontend
      - build-backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
      - name: Transfer Configs
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: ./ci/nginx.conf,./ci/docker-compose.yaml
          target: ./incoming

      - name: Deploy configs and Update Stack
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            mv ./incoming/ci/docker-compose.yaml .
            mv ./incoming/ci/nginx.conf nginx/conf/
            rm -rf ./incoming
            docker pull "${{ needs.build-backend.outputs.image_name }}"            
            docker compose up --force-recreate -d

      - uses: actions/deploy-pages@v4
